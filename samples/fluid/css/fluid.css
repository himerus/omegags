/*
 * SAMPLE GRID SIZES ###########################
 * Use these, or your own calculations for a fixed width grid.
 * 1200px Grid =========
 *   $cwidth: 80; $gutter: 20; $cols: 12; 
 *   $cwidth: 55; $gutter: 20; $cols: 16;
 *
 * 960px Grid =========
 *   $cwidth: 60; $gutter: 20; $cols: 12; 
 *   $cwidth: 40; $gutter: 20; $cols: 16;
 * Fluid Grid =========
 *   $cwidth: 60; $gutter: 20; $cols: 12; 
 *   $cwidth: 40; $gutter: 20; $cols: 16;
 */
/* Utility function to simplify math used in mixins 
 * Will convert (when needed) widths to a percentage
 */
body {
  width: 100%;
  min-width: 100%;
  *zoom: 1;
}
body:before, body:after {
  content: "";
  display: table;
}
body:after {
  clear: both;
}

/* 
 * Currently the argument passed here pulls the column count from the global system, or allows you to overwrite it. 
 * However, it was never used (even in original version) to do anything. ???
 * 
 * Something should be solved here to allow "overwriting" of the columns for a row.
 */
/**
 *  You have the ability to specify the default number of columns used in the grid here
 *  This recalculates the available space in a "row" so that the grid widths are standardized
 *  in the full layout.
 *  This only becomes apparent in fluid and nested layouts
 */
/* Content First push/pull effects */
/* Prefix/Suffix add padding to the left/right of an element to widen the gutter and additional column space */
#main {
  min-width: 740px;
  *zoom: 1;
}
#main:before, #main:after {
  content: "";
  display: table;
}
#main:after {
  clear: both;
}
#main #content-wrapper,
#main #postscript-wrapper {
  /* default row width */
  /* assuming the layout is fluid, just skip calculations and make the row 100% width for sanity in nested layouts */
  width: 100%;
  display: block;
  margin: 0 auto;
  /* Make sure the row clears itself */
  *zoom: 1;
  margin-bottom: 1em;
}
#main #content-wrapper:before, #main #content-wrapper:after,
#main #postscript-wrapper:before,
#main #postscript-wrapper:after {
  content: "";
  display: table;
}
#main #content-wrapper:after,
#main #postscript-wrapper:after {
  clear: both;
}
#main #content {
  display: block;
  position: relative;
  /* default width & margin values */
  /* for fluid, the following is needed for nested columns to determine the true width & margin */
  width: 47.917%;
  margin: 0 1.042% 0 1.042%;
  	/* While in a standard grid, it's easy to remove margins for nested grids, in a fluid layout it poses a small problem
  	 * when determining the full width of the elements. 
  	 * For now, we assume that we should take that margin we are removing and put it on the other margin
  	 * This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
  	 * on design.
     */
  /* RTL/LTR switching */
  float: left;
  /* Debugging code to display rendered width & margins */
  	/*
  	> .inner {
  	
    	&:before {
      	content: "width: " + $colwidth + ";";
      	
    	}
    	.debug:after {
    	  content: "margin: " + $colmargin + ";";
    	}
  	}
  	*/
}
#main #sidebar_first {
  display: block;
  position: relative;
  /* default width & margin values */
  /* for fluid, the following is needed for nested columns to determine the true width & margin */
  width: 22.917%;
  margin: 0 1.042% 0 1.042%;
  	/* While in a standard grid, it's easy to remove margins for nested grids, in a fluid layout it poses a small problem
  	 * when determining the full width of the elements. 
  	 * For now, we assume that we should take that margin we are removing and put it on the other margin
  	 * This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
  	 * on design.
     */
  /* RTL/LTR switching */
  float: left;
  /* Debugging code to display rendered width & margins */
  	/*
  	> .inner {
  	
    	&:before {
      	content: "width: " + $colwidth + ";";
      	
    	}
    	.debug:after {
    	  content: "margin: " + $colmargin + ";";
    	}
  	}
  	*/
}
#main #sidebar_second {
  display: block;
  position: relative;
  /* default width & margin values */
  /* for fluid, the following is needed for nested columns to determine the true width & margin */
  width: 22.917%;
  margin: 0 1.042% 0 1.042%;
  	/* While in a standard grid, it's easy to remove margins for nested grids, in a fluid layout it poses a small problem
  	 * when determining the full width of the elements. 
  	 * For now, we assume that we should take that margin we are removing and put it on the other margin
  	 * This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
  	 * on design.
     */
  /* RTL/LTR switching */
  float: left;
  /* Debugging code to display rendered width & margins */
  	/*
  	> .inner {
  	
    	&:before {
      	content: "width: " + $colwidth + ";";
      	
    	}
    	.debug:after {
    	  content: "margin: " + $colmargin + ";";
    	}
  	}
  	*/
}
#main #postscript_first {
  display: block;
  position: relative;
  /* default width & margin values */
  /* for fluid, the following is needed for nested columns to determine the true width & margin */
  width: 31.25%;
  margin: 0 1.042% 0 1.042%;
  	/* While in a standard grid, it's easy to remove margins for nested grids, in a fluid layout it poses a small problem
  	 * when determining the full width of the elements. 
  	 * For now, we assume that we should take that margin we are removing and put it on the other margin
  	 * This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
  	 * on design.
     */
  /* RTL/LTR switching */
  float: left;
  /* Debugging code to display rendered width & margins */
  	/*
  	> .inner {
  	
    	&:before {
      	content: "width: " + $colwidth + ";";
      	
    	}
    	.debug:after {
    	  content: "margin: " + $colmargin + ";";
    	}
  	}
  	*/
}
#main #postscript_second {
  display: block;
  position: relative;
  /* default width & margin values */
  /* for fluid, the following is needed for nested columns to determine the true width & margin */
  width: 31.25%;
  margin: 0 1.042% 0 1.042%;
  	/* While in a standard grid, it's easy to remove margins for nested grids, in a fluid layout it poses a small problem
  	 * when determining the full width of the elements. 
  	 * For now, we assume that we should take that margin we are removing and put it on the other margin
  	 * This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
  	 * on design.
     */
  /* RTL/LTR switching */
  float: left;
  /* Debugging code to display rendered width & margins */
  	/*
  	> .inner {
  	
    	&:before {
      	content: "width: " + $colwidth + ";";
      	
    	}
    	.debug:after {
    	  content: "margin: " + $colmargin + ";";
    	}
  	}
  	*/
}
#main #postscript_third {
  display: block;
  position: relative;
  /* default width & margin values */
  /* for fluid, the following is needed for nested columns to determine the true width & margin */
  width: 31.25%;
  margin: 0 1.042% 0 1.042%;
  	/* While in a standard grid, it's easy to remove margins for nested grids, in a fluid layout it poses a small problem
  	 * when determining the full width of the elements. 
  	 * For now, we assume that we should take that margin we are removing and put it on the other margin
  	 * This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
  	 * on design.
     */
  /* RTL/LTR switching */
  float: left;
  /* Debugging code to display rendered width & margins */
  	/*
  	> .inner {
  	
    	&:before {
      	content: "width: " + $colwidth + ";";
      	
    	}
    	.debug:after {
    	  content: "margin: " + $colmargin + ";";
    	}
  	}
  	*/
}
