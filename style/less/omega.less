  /*
   * SAMPLE GRID SIZES ###########################
   * Use these, or your own calculations for a fixed width grid.
   * 1200px Grid =========
   *   @cwidth: 80; @gutter: 20; @cols: 12; 
   *   @cwidth: 55; @gutter: 20; @cols: 16;
   *
   * 960px Grid =========
   *   @cwidth: 60; @gutter: 20; @cols: 12; 
   *   @cwidth: 40; @gutter: 20; @cols: 16;
   */


// Default grid sizing (960px)
@cwidth:        60;    // column width
@gutter:        20;    // gutter width 
@cols:          12;    // total # of cols

// Utility Width Variable â€” you should never need to modify these
@gwidth: (@cwidth * @cols) + (@gutter * @cols) * 1px; // grid width

// Set @twidth to 100% for a fluid layout
@twidth: @gwidth; // total width

// The micro clearfix 
// http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	*zoom:1;
	
	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

body {
  width: 100%;
  // The min-width is needed so items outside the grid stay the correct width if horizontal scroll is active
  // (at least in a fixed layout) ????
  min-width: @twidth;
	.clearfix;
}

/* 
 * Currently the argument passed here pulls the column count from the global system, or allows you to overwrite it. 
 * However, it was never used (even in original version) to do anything. ???
 * 
 * Something should be solved here to allow "overwriting" of the columns for a row.
 */

.row(@cols:@cols) {
	display: block;
	margin: 0 auto;
	width: @twidth;
	.clearfix;
}

.column(@x,@cols:@cols) {
	display: block;
	position: relative;
	float: left;
	width: @twidth * (((@gutter + @cwidth) * @x) - @gutter) / @gwidth;
	margin: 0 (@twidth * (@gutter / 2) / @gwidth);
}

/* Content First push/pull effects */
.push(@x:1) {
	left: (@twidth * (@gutter + @cwidth) / @gwidth) * @x;
}

.pull(@x:1) {
	right: (@twidth * (@gutter + @cwidth) / @gwidth) * @x;
}

/* Prefix/Suffix add padding to the left/right of an element to widen the gutter and additional column space */
.prefix(@x:1) {
  margin-left: @twidth * (((@gutter + @cwidth) * @x) + @gutter / 2) / @gwidth;
}

.suffix(@x:1) {
  margin-right: @twidth * (((@gutter + @cwidth) * @x) + @gutter / 2) / @gwidth;
}