// SAMPLE GRID SIZES ###########################
// Use these, or your own calculations for a fixed width grid.
// 1200px Grid =========

// $omegags-column-width: 80;
// $omegags-gutter-width: 20;
// $omegags-column-count: 12;

// $omegags-column-width: 55;
// $omegags-gutter-width: 20;
// $omegags-column-count: 16;
//
// 960px Grid =========
// $omegags-column-width: 60;
// $omegags-gutter-width: 20;
// $omegags-column-count: 12;

// $omegags-column-width: 40;
// $omegags-gutter-width: 20;
// $omegags-column-count: 16;

// Fluid Grid =========
// $omegags-column-width: 60;
// $omegags-gutter-width: 20;
// $omegags-column-count: 12;

// $omegags-column-width: 40;
// $omegags-gutter-width: 20;
// $omegags-column-count: 16;

// Default grid sizing (960px)
$omegags-column-width: 60px !default; // column width
$omegags-gutter-width: 20px !default; // gutter width
$omegags-column-count: 12 !default; // total # of cols
$omegags-direction: 'LTR' !default; // Values should be LTR or RTL

// Utility Width Variable â€” you should never need to modify these
@function gwidth($c:$omegags-column-count) {
  //@return ($omegags-column-width * $c) + ($omegags-gutter-width * $c); // grid width
  @return ($omegags-column-width + $omegags-gutter-width) * $c;
}

// Set $omegags-total-width to 100% for a fluid layout
$omegags-total-width: gwidth($omegags-column-count) !default; // total width

// Utility function to simplify math used in mixins
// Will convert (when needed) widths to a percentage
@function calcwidth($omegags-column-count) {
  @return $omegags-total-width / gwidth($omegags-column-count);
}

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7.
// See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 480;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
  *zoom: 1;

  &:before,
  &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

body {
  @include clearfix();
  // The min-width is needed so items outside the grid stay the correct width if horizontal scroll
  // is active so they don't scale to the browser while grid items overflow
  min-width: $omegags-total-width;
  width: 100%;
}

@mixin row($c:$omegags-column-count) {
  display: block;
  margin: 0 auto;

  // default row width
  $rwidth: (gwidth($c) * calcwidth($c));
  // assuming the layout is fluid, just skip calculations and make the row 100% width for sanity in nested layouts
  @if $omegags-total-width == 100% {
    $rwidth: 100%;
  }
  width: $rwidth;
  // IE 6 & 7 sub-pixel rounding fix
  //*width: $rwidth - $correction;

  // Make sure the row clears itself
  @include clearfix();
}

// You have the ability to specify the default number of columns used in the grid here
// This recalculates the available space in a "row" so that the grid widths are standardized
// in the full layout.
// This only becomes apparent in fluid and nested layouts

// While in a standard, fixed-width grid, it's easy to remove margins for nested grids, in a fluid layout it
// poses a small problem when determining the full width of the elements.
// For now, we assume that we should take that margin we are removing and put it on the other margin
// This could however, be added to the width of the element instead, but that could cause "quirks" as well depending
// on design.

// Essentially, I don't recommend using the column() mixin for nested columns inside a fluid layout

@mixin column($x, $realcols:$omegags-column-count, $margin: 'normal') {
  display: block;
  position: relative;
  clear: none;
  // default width & margin values
  $colwidth: ((gwidth($x) - $omegags-gutter-width) * calcwidth($realcols));
  $colmargin: ($omegags-gutter-width / 2) * calcwidth($realcols);
  @if $omegags-total-width == 100% {
    // for fluid, the following is needed for nested columns to determine the true width & margin */
    $colwidth: ((gwidth($x) - $omegags-gutter-width) * calcwidth($realcols)) * ($omegags-column-count / $realcols);
    $colmargin: (($omegags-gutter-width / 2) * calcwidth($realcols)) * ($omegags-column-count / $realcols);
  }

  $rightmargin: $colmargin;
  $leftmargin: $colmargin;

  width: $colwidth;

  margin-right: $rightmargin;
  margin-left: $leftmargin;

  // IE 6 & 7 sub-pixel rounding fix
  //*width: $colwidth - $correction;
  //*margin: 0 $rightmargin - $correction 0 $leftmargin - $correction;
  //*margin-right: $rightmargin - $correction;
  //*margin-left: $leftmargin - $correction;

  @if $margin == 'alpha' {
    @if $omegags-total-width == 100% {
      $rightmargin: $rightmargin * 2;
    }
    //margin: 0 $rightmargin 0 0;
    margin-right: $rightmargin;
  }
  @if $margin == 'omega' {
    @if $omegags-total-width == 100% {
      $leftmargin: $leftmargin * 2;
    }
    //margin: 0 0 0 $leftmargin;
    margin-left: $leftmargin;
  }

  // RTL/LTR switching
  @if $omegags-direction == 'LTR' {
    float: left;
  }
  @if $omegags-direction == 'RTL' {
    float: right;
  }
}

// Content First push/pull effects
@mixin push($x:1) {
  @if $omegags-direction == 'LTR' {
    left: ($omegags-gutter-width + $omegags-column-width) * calcwidth($omegags-column-count) * $x;
    right: auto;
  }
  @if $omegags-direction == 'RTL' {
    right: ($omegags-gutter-width + $omegags-column-width) * calcwidth($omegags-column-count) * $x;
    left: auto;
  }
}

@mixin pull($x:1) {
  @if $omegags-direction == 'LTR' {
    right: ($omegags-gutter-width + $omegags-column-width) * calcwidth($omegags-column-count) * $x;
    left: auto;
  }
  @if $omegags-direction == 'RTL' {
    left: ($omegags-gutter-width + $omegags-column-width) * calcwidth($omegags-column-count) * $x;
    right: auto;
  }
}

// Prefix/Suffix add padding to the left/right of an element to widen the gutter and additional column space
@mixin prefix($x:1) {
  @if $omegags-direction == 'LTR' {
    margin-left: ((($omegags-gutter-width + $omegags-column-width) * $x) + $omegags-gutter-width / 2) * calcwidth($omegags-column-count);
  }
  @if $omegags-direction == 'RTL' {
    margin-right: ((($omegags-gutter-width + $omegags-column-width) * $x) + $omegags-gutter-width / 2) * calcwidth($omegags-column-count);
  }
}

@mixin suffix($x:1) {
  @if $omegags-direction == 'LTR' {
    margin-right: ((($omegags-gutter-width + $omegags-column-width) * $x) + $omegags-gutter-width / 2) * calcwidth($omegags-column-count);
  }
  @if $omegags-direction == 'RTL' {
    margin-left: ((($omegags-gutter-width + $omegags-column-width) * $x) + $omegags-gutter-width / 2) * calcwidth($omegags-column-count);
  }
}

@mixin column-reset() {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
  left: auto;
  right: auto;
  float: none;
  clear: both;
}
